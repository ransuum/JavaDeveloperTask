plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.avast.gradle.docker-compose' version '0.14.5'
    id 'com.google.protobuf' version '0.8.18'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
def grpcVersion = '1.44.1'
def protobufVersion = '3.19.2'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.auth0:java-jwt:4.4.0'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.19.7'
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.19.7'
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.19.7'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.5.Final'
    implementation group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.5.5.Final'
    implementation 'io.github.lognet:grpc-spring-boot-starter:4.6.0'
}
protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protobufVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
dockerCompose {
    useComposeFiles = [file('docker-compose.yml')] as List<String>
}